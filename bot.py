import os
import logging
import tempfile
import zipfile
import requests
import telebot
from flask import Flask, request
from threading import Thread

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ NHentai Bot is running", 200

def run_flask():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID', 0))
WHITELIST = list(map(int, os.environ.get('WHITELIST_IDS', '').split(','))) if os.environ.get('WHITELIST_IDS') else []
REQUEST_TIMEOUT = 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not all([BOT_TOKEN, ADMIN_ID, WHITELIST]):
    logging.error("Missing required environment variables!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id not in WHITELIST:
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    help_text = (
        "üìö NHentai Download Bot\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/download [ID] - –°–∫–∞—á–∞—Ç—å –º–∞–Ω–≥—É\n"
        "/add_whitelist [ID] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/get_id - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π ID\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/download 177013"
    )
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['download'])
def download_manga(message):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω–≥–∏ –ø–æ ID"""
    if message.from_user.id not in WHITELIST:
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        manga_id = message.text.split()[1]
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –º–∞–Ω–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /download 177013)")
        return

    msg = bot.reply_to(message, f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–∞–Ω–≥—É #{manga_id}...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        response = requests.get(
            f"https://nhentai.net/api/gallery/{manga_id}",
            timeout=REQUEST_TIMEOUT
        )
        response.raise_for_status()
        data = response.json()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        with tempfile.TemporaryDirectory() as tmp_dir:
            img_paths = []
            media_id = data['media_id']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i, page in enumerate(data['images']['pages'], 1):
                ext = {'j': 'jpg', 'p': 'png', 'g': 'gif'}.get(page['t'], 'jpg')
                url = f"https://nhentai.net/galleries/{media_id}/{i}.{ext}"
                
                img_data = requests.get(url, timeout=REQUEST_TIMEOUT)
                img_data.raise_for_status()
                
                img_path = os.path.join(tmp_dir, f"{i}.{ext}")
                with open(img_path, 'wb') as f:
                    f.write(img_data.content)
                img_paths.append(img_path)
            
            # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤
            zip_path = os.path.join(tmp_dir, f"{manga_id}.zip")
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for img in img_paths:
                    zipf.write(img, os.path.basename(img))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(zip_path, 'rb') as f:
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"‚úÖ –ú–∞–Ω–≥–∞ #{manga_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                    reply_to_message_id=message.message_id
                )
            bot.delete_message(message.chat.id, msg.message_id)

    except requests.exceptions.RequestException as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

@bot.message_handler(commands=['add_whitelist'])
def add_to_whitelist(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    try:
        new_user = int(message.text.split()[1])
        if new_user not in WHITELIST:
            WHITELIST.append(new_user)
            bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫!")
        else:
            bot.reply_to(message, "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ")
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_whitelist [USER_ID]")

@bot.message_handler(commands=['get_id'])
def get_user_id(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot.reply_to(message, f"üÜî –í–∞—à ID: {message.from_user.id}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
